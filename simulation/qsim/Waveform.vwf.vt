// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/09/2023 18:35:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          usb_capture
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module usb_capture_vlg_vec_tst();
// constants                                           
// general purpose registers
reg HSPI_CLK;
reg HSPI_HTRDY;
reg treg_SPI_MISO;
reg SPI_SCK;
reg ULPI_CLK;
reg [7:0] treg_ULPI_D;
reg ULPI_DIR;
reg ULPI_NXT;
// wires                                               
wire [7:0] HSPI_D;
wire HSPI_HTREQ;
wire HSPI_HTVLD;
wire SPI_MISO;
wire [7:0] ULPI_D;
wire ULPI_RST;
wire ULPI_STP;

// assign statements (if any)                          
assign SPI_MISO = treg_SPI_MISO;
assign ULPI_D = treg_ULPI_D;
usb_capture i1 (
// port map - connection between master ports and signals/registers   
	.HSPI_CLK(HSPI_CLK),
	.HSPI_D(HSPI_D),
	.HSPI_HTRDY(HSPI_HTRDY),
	.HSPI_HTREQ(HSPI_HTREQ),
	.HSPI_HTVLD(HSPI_HTVLD),
	.SPI_MISO(SPI_MISO),
	.SPI_SCK(SPI_SCK),
	.ULPI_CLK(ULPI_CLK),
	.ULPI_D(ULPI_D),
	.ULPI_DIR(ULPI_DIR),
	.ULPI_NXT(ULPI_NXT),
	.ULPI_RST(ULPI_RST),
	.ULPI_STP(ULPI_STP)
);
initial 
begin 
#100000000 $finish;
end 

// HSPI_CLK
initial
begin
	repeat(333)
	begin
		HSPI_CLK = 1'b0;
		HSPI_CLK = #150000 1'b1;
		# 150000;
	end
	HSPI_CLK = 1'b0;
end 

// HSPI_HTRDY
initial
begin
	HSPI_HTRDY = 1'b0;
	HSPI_HTRDY = #4500000 1'b1;
	HSPI_HTRDY = #85500000 1'b0;
	HSPI_HTRDY = #4500000 1'b1;
end 
endmodule

